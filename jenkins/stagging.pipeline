/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent any

    environment {
        FRONTEND_PROJECT_PATH = 'D:\\web dev\\leggera2remaster\\leggera'
        FRONTEND_DEPLOY_PATH = 'D:\\webdev_staging\\leggera2'

        BACKEND_PROJECT_PATH = 'D:\\web dev\\leggera2remaster\\api'
        BACKEND_DEPLOY_PATH = 'D:\\webdev_staging\\leggera2api'

        TESTING_PROJECT_PATH = 'D:\\web dev\\leggera2qa'
    }

    parameters {
        booleanParam(name: 'DEPLOY_FRONTEND', defaultValue: true, description: 'Deploy Frotend')
        booleanParam(name: 'DEPLOY_BACKEND', defaultValue: true, description: 'Deploy Backend')
        booleanParam(name: 'DEPLOY_SQL', defaultValue: false, description: 'Restore Database')
        booleanParam(name: 'TESTING_PLAYWRIGHT', defaultValue: false, description: 'Playwright Testing')
        booleanParam(name: 'TESTING_NEWMAN', defaultValue: false, description: 'Newman Testing')
        booleanParam(name: 'TESTING_K6', defaultValue: false, description: 'K6 Testing')
    }
    stages {
        stage('Front-end Deploy') {
            when {
                expression { return params.DEPLOY_FRONTEND }
            }
            steps {
                script {
                    bat """
                        cd /d "${FRONTEND_PROJECT_PATH}"
                        npm install && npx ng build --configuration development
                    """
                }

                script {
                    bat """
                        del /q /f "${FRONTEND_DEPLOY_PATH}\\*" && for /d %%i in ("${FRONTEND_DEPLOY_PATH}\\*") do rd /s /q "%%i"
                        xcopy /E /I /H /Y "${FRONTEND_PROJECT_PATH}\\dist\\leggera\\browser" "${FRONTEND_DEPLOY_PATH}"
                    """
                }
            }
        }

        stage('Back-end Deploy') {
            when {
                expression { return params.DEPLOY_BACKEND }
            }
            steps {
                script {
                    bat """
                        del /q /f "${BACKEND_DEPLOY_PATH}\\*" && for /d %%i in ("${BACKEND_DEPLOY_PATH}\\*") do rd /s /q "%%i"
                        xcopy /E /I /H /Y "${BACKEND_PROJECT_PATH}" "${BACKEND_DEPLOY_PATH}"
                    """
                }
            }
        }

        stage('Deploying Database') {
            when {
                expression { return params.DEPLOY_SQL }
            }
            steps {
                script {
                    bat """
                    @echo off
                    setlocal

                    :: Set MySQL credentials and paths
                    set MYSQL_USER=root
                    set MYSQL_PASSWORD=root
                    set DATABASE=leggera2staging
                    set BACKUP_FILE=D:\\web dev\\leggera2qa\\sql\\demo.sql

                    :: Check if the database exists
                    echo Checking if the database %DATABASE% exists...
                    mysql -u %MYSQL_USER% -p%MYSQL_PASSWORD% -P 3002 -e "SHOW DATABASES LIKE '%DATABASE%';" > nul 2>&1

                    if %errorlevel% == 0 (
                        echo Database %DATABASE% exists. Deleting it...
                        mysql -u %MYSQL_USER% -p%MYSQL_PASSWORD% -P 3002 -e "DROP DATABASE %DATABASE%;"
                    ) else (
                        echo Database %DATABASE% does not exist.
                    )

                    :: Create the database
                    echo Creating the database %DATABASE%...
                    mysql -u %MYSQL_USER% -p%MYSQL_PASSWORD% -P 3002 -e "CREATE DATABASE %DATABASE%;"

                    :: Restore the backup
                    echo Restoring the backup into %DATABASE%...
                    mysql -u %MYSQL_USER% -p%MYSQL_PASSWORD% -P 3002 %DATABASE% < "%BACKUP_FILE%"

                    echo Database restoration complete.
                    endlocal
                """
                }
            }
        }

        stage('Installing dependencies') {
            when {
                expression { return params.TESTING_PLAYWRIGHT || params.TESTING_NEWMAN }
            }
            steps {
                script {
                    bat """
                    cd /d "${TESTING_PROJECT_PATH}"
                    npm install
                """
                }
            }
        }

        stage('Playwright testing') {
            when {
                expression { return params.TESTING_PLAYWRIGHT }
            }
            steps {
                script {
                    bat """
                    cd /d "${TESTING_PROJECT_PATH}"
                    npx playwright test
                """
                }

                publishHTML(target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: "${TESTING_PROJECT_PATH}\\playwright-report",
                reportFiles: 'index.html',
                reportName: 'Playwright Test Report'
            ])
            }
        }

        stage('Newman testing') {
            when {
                expression { return params.TESTING_NEWMAN }
            }
            steps {
                script {
                    bat """
                    cd /d "${TESTING_PROJECT_PATH}"
                    npx newman run \"${TESTING_PROJECT_PATH}\\postman\\collection.json\" -e \"${TESTING_PROJECT_PATH}\\postman\\environment.json\" --reporters cli,htmlextra,json --reporter-htmlextra-export newman-report/newman-report.html --reporter-json-export newman-report/newman-report.json
                """
                }

                publishHTML(target:[
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: "${TESTING_PROJECT_PATH}\\newman-report",
                reportFiles: 'newman-report.html',
                reportName: 'Newman Test Report'
            ])

                script {
                /* groovylint-disable-next-line NoDef, VariableTypeRequired */
                    def results = readJSON text: readFile("${TESTING_PROJECT_PATH}\\newman-report\\newman-report.json")
                    currentBuild.result = results.run.stats.tests.failed > 0 ? 'FAILURE' : 'SUCCESS'
                }
            }
        }

        stage('K6 testing') {
            when {
                expression { return params.TESTING_K6 }
            }
            steps {

                // todo -> script to add 100 new users and save them to an array into a txt file

                script {
                    bat """
                    cd /d "${TESTING_PROJECT_PATH}\\k6"
                    k6 run --out json=./report/results.json ./tests/basic.k6.spec.js
                """
                }

                publishHTML(target:[
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: "${TESTING_PROJECT_PATH}\\k6\\report",
                reportFiles: 'k6-report.html',
                reportName: 'K6 Test Report'
            ])
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Build and tests completed successfully!'
        }
        failure {
            echo 'Build or tests failed!'
        }
    }
}
