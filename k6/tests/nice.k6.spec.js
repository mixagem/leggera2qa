// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";

export let options = {
  vus: 100,
  duration: '60s',
  maxRedirects: 4
};

const usernames = JSON.parse(open('users.txt'));

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    URL: "http://localhost:3001/",
    username: "mix",
    password: "1",
    cookie: "",
    anon_token: "",
    anon: ""
  }
});

export default function () {
  const currentUser = usernames[__VU % usernames.length];  // Map each VU to a username
  let currentCookie = '';  // Map each VU to a username

  group("Login", function () {
    postman[Request]({
      name: "Login failure - no pw",
      id: "ba058e87-0d31-46d4-bd21-a69d113e2f94",
      method: "POST",
      address: "{{URL}}/login.php",
      data: {
        username: currentUser,
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Login failed on purpose - No password (400)", function () {
          pm.response.to.have.status(400);
        });

        pm.test("Detailed error message - No password (400)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("password");
        });
      }
    });
    postman[Request]({
      name: "Login failure - no user",
      id: "440ff2b7-dee7-44ae-b3f6-56df5d7456a9",
      method: "POST",
      address: "{{URL}}/login.php",
      data: {
        password: "{{password}}"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Login failed on purpose - No user (400)", function () {
          pm.response.to.have.status(400);
        });

        pm.test("Detailed error message - No user (400)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("username");
        });
      }
    });

    postman[Request]({
      name: "Login failure - wrong credentials",
      id: "ed933663-69e8-4c1d-bf2a-30e3c5b7d181",
      method: "POST",
      address: "{{URL}}/login.php",
      data: {
        username: "xxxxx",
        password: "xxxxx"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test(
          "Login failed on purpose - Wrong credentials (401)",
          function () {
            pm.response.to.have.status(401);
          }
        );

        pm.test("Detailed error message - Wrong credentials (401)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("credentials");
        });
      }
    });

    postman[Request]({
      name: "Login",
      id: "62256dd4-cbc3-48b9-9231-8bf02b703e6d",
      method: "POST",
      address: "{{URL}}/login.php",
      data: {
        username: currentUser,
        password: "{{password}}"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Login successful", function () {
          pm.response.to.have.status(200);
        });

        let expectedProperties = [
          "name",
          "username",
          "language",
          "version",
          "theme",
          "monacoTheme",
          "email",
          "profilepic",
          "cookie",
          "features",
          "breadcumbs"
        ];

        expectedProperties.forEach(prop => {
          pm.test(`UserSettings object has property: ${prop}`, function () {
            pm.expect(rsp.userSettings).to.have.property(prop);

            if (prop === "cookie") {
              currentCookie = rsp.userSettings.cookie;
            }
          });
        });

        pm.test("UserSettings object has no new properties", function () {
          pm.expect(
            Object.keys(rsp.userSettings).length === expectedProperties.length
          );
        });
      }
    });
  });

  group("Elements", function () {
    postman[Request]({
      name: "Get elements",
      id: "9731e7ea-4878-4f0d-8c7d-4b1763106669",
      method: "GET",
      address:
        "{{URL}}/elements.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        const rsp = pm.response.json();

        pm.test("Get list query", function () {
          return rsp.sucess;
        });

        if (!rsp.dataSource.length) {
          pm.test.skip("Skipping test given user has no elements");
        } else {
          let expectedProperties = [
            "id",
            "name",
            "collectionLabel",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Element object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Element object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource).length === expectedProperties.length
            );
          });
        }
      }
    });
  });

  group("Collections", function () {
    postman[Request]({
      name: "Get collections",
      id: "dd04abbb-5c5f-4384-9e56-ba2e9b19a4b6",
      method: "GET",
      address:
        "{{URL}}/collections.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        const rsp = pm.response.json();

        pm.test("Get list query", function () {
          return rsp.sucess;
        });

        if (!rsp.dataSource.length) {
          pm.test.skip("Skipping test given user has no collections");
        } else {
          let expectedProperties = [
            "name",
            "application",
            "applicationLabel",
            "details",
            "icon",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Collection object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Collection object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource).length === expectedProperties.length
            );
          });
        }
      }
    });
  });

  group("Applications", function () {
    postman[Request]({
      name: "Get applications",
      id: "0243f1ba-27e1-472e-abbc-babbcd558a41",
      method: "GET",
      address:
        "{{URL}}/applications.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        const rsp = pm.response.json();

        pm.test("Get list query", function () {
          return rsp.sucess;
        });

        if (!rsp.dataSource.length) {
          pm.test.skip("Skipping test given user has no applications");
        } else {
          let expectedProperties = [
            "name",
            "details",
            "logo",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Application object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Application object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource).length === expectedProperties.length
            );
          });
        }
      }
    });
  });

  group("Anon", function () {
    postman[Request]({
      name: "Missing operation",
      id: "58192f98-26a6-46ee-95fe-7bcae22e508f",
      method: "GET",
      address: "{{URL}}/anon.php",
      post(response) {
        const rsp = pm.response.json();

        pm.test("/anon endpoint failure - no operation (400)", function () {
          pm.response.to.have.status(400);
        });

        pm.test("Detailed error message - no operation (400)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("operation");
        });
      }
    });

    postman[Request]({
      name: "Get availability",
      id: "1c63782b-6d47-4e62-8660-43cbad41d573",
      method: "GET",
      address: "{{URL}}/anon.php?operation=availability",
      post(response) {
        const rsp = pm.response.json();

        pm.test("Anon availability (200)", function () {
          pm.response.to.have.status(200);
        });

        let rspExpectedProperties = ["record", "token", "sucess", "details"];
        rspExpectedProperties.forEach(prop => {
          pm.test(`Response object has property: ${prop}`, function () {
            pm.expect(rsp).to.have.property(prop);
          });
        });

        pm.test("Response object has no new properties", function () {
          pm.expect(Object.keys(rsp).length === rspExpectedProperties.length);
        });

        let recordExpectedProperties = [
          "username",
          "name",
          "owner",
          "profilepic",
          "theme",
          "monacoTheme",
          "breadcumbs",
          "language",
          "created",
          "cookie",
          "features"
        ];
        recordExpectedProperties.forEach(recordProp => {
          pm.test(`Record object has property: ${recordProp}`, function () {
            pm.expect(rsp.record).to.have.property(recordProp);
          });
        });

        pm.test("Record object has no new properties", function () {
          pm.expect(
            Object.keys(rsp.record).length === recordExpectedProperties.length
          );
        });

        pm.environment.set("cookie", rsp.record.cookie);
        pm.environment.set("username", rsp.record.username);
        pm.environment.set("anon_token", rsp.token);

        pm.environment.set("anon", JSON.stringify(rsp.record));
      }
    });


    postman[Request]({
      name: "Anon login failure - no token",
      id: "6ec1c885-db64-445a-b204-d26b294b1cca",
      method: "POST",
      address: "{{URL}}/anon.php",
      data: {
        username: currentUser,
        password: "{{password}}",
        operation: "login",
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Anon login failure - no token (400)", function () {
          pm.response.to.have.status(400);
        });

        pm.test("Detailed error message - no token (400)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("post params");
          pm.expect(rsp.details[1].toLowerCase()).to.include("token");
        });
      }
    });

    postman[Request]({
      name: "Anon login failure - expired token",
      id: "10f25165-baa8-4d6d-ad49-1713419e26fd",
      method: "POST",
      address: "{{URL}}/anon.php",
      data: {
        username: currentUser,
        password: "{{password}}",
        operation: "login",
        token: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Anon login failure - expired token (401)", function () {
          pm.response.to.have.status(401);
        });

        pm.test("Detailed error message - expired token (401)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("invalid token");
        });
      }
    });

    postman[Request]({
      name: "Anon login failure - invalid token",
      id: "c1f0a935-d1d6-4da2-b3ac-11f77f8c2c1c",
      method: "POST",
      address: "{{URL}}/anon.php",
      data: {
        username: currentUser,
        password: "{{password}}",
        operation: "login",
        token: "xx"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Anon login failure - Invalid token (400)", function () {
          pm.response.to.have.status(400);
        });

        pm.test("Detailed error message - Invalid token (400)", function () {
          pm.expect(rsp).to.have.property("details");
          pm.expect(rsp.details[1].toLowerCase()).to.include("token syntax");
        });
      }
    });


    postman[Request]({
      name: "Anon create",
      id: "339ff627-6cf7-403a-8535-63e38f04a6ed",
      method: "POST",
      address: "{{URL}}/anon.php",
      data: {
        operation: "create",
        token: "{{anon_token}}",
        anon: "{{anon}}"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Anon creation successful", function () {
          pm.response.to.have.status(200);
        });

        let rspExpectedProperties = ["record", "sucess", "details"];
        rspExpectedProperties.forEach(prop => {
          pm.test(
            `Anon creation response object has property: ${prop}`,
            function () {
              pm.expect(rsp).to.have.property(prop);
            }
          );
        });

        pm.test(
          "Anon creation response object has no new properties",
          function () {
            pm.expect(Object.keys(rsp).length === rspExpectedProperties.length);
          }
        );

        let anonExpectedProperties = [
          "profilepic",
          "token",
          "username",
          "name",
          "owner",
          "theme",
          "monacoTheme",
          "breadcumbs",
          "language",
          "created",
          "cookie",
          "features",
          "sessionticks"
        ];
        anonExpectedProperties.forEach(anonProp => {
          pm.test(
            `Anon creation record object has property: ${anonProp}`,
            function () {
              pm.expect(rsp.record).to.have.property(anonProp);
            }
          );
        });

        pm.test(
          "Anon creation record object has no new properties",
          function () {
            pm.expect(Object.keys(rsp).length === rspExpectedProperties.length);
          }
        );
      }
    });

    postman[Request]({
      name: "Anon login",
      id: "45486c7a-561b-481f-86f4-6e65daa9d34d",
      method: "POST",
      address: "{{URL}}/anon.php",
      data: {
        username: currentUser,
        password: "{{password}}",
        operation: "login",
        token: "{{anon_token}}"
      },
      post(response) {
        const rsp = pm.response.json();

        pm.test("Anon Login successful", function () {
          pm.response.to.have.status(200);
        });

        let rspExpectedProperties = ["record", "sucess", "details"];
        rspExpectedProperties.forEach(prop => {
          pm.test(
            `Anon login response object has property: ${prop}`,
            function () {
              pm.expect(rsp).to.have.property(prop);
            }
          );
        });

        pm.test("Anon login response object has no new properties", function () {
          pm.expect(Object.keys(rsp).length === rspExpectedProperties.length);
        });

        let recordExpectedProperties = [
          "stamp",
          "profilepic",
          "token",
          "username",
          "name",
          "owner",
          "theme",
          "monacoTheme",
          "breadcumbs",
          "language",
          "created",
          "cookie",
          "features",
          "version"
        ];
        recordExpectedProperties.forEach(recordProp => {
          pm.test(
            `Anon login record object has property: ${recordProp}`,
            function () {
              pm.expect(rsp.record).to.have.property(recordProp);
            }
          );
        });

        pm.test("Anon login record object has no new properties", function () {
          pm.expect(Object.keys(rsp).length === rspExpectedProperties.length);
        });
      }
    });

  });
}

export function handleSummary(data) {
  return {
    "./report/k6-report.html": htmlReport(data),
  };
}
