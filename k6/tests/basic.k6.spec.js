// Auto-generated by the postman-to-k6 converter

import "../libs/shim/core.js";
import "../libs/shim/expect.js";
import "../libs/shim/urijs.js";
import { group } from "k6";
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";

export let options = {
  vus: 100,
  duration: '30s',
  maxRedirects: 4
};

const usernames = JSON.parse(open('users.txt'));

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    URL: "http://localhost:3001",
    password: "1",
  }
});

export default function () {
  const currentUser = usernames[__VU % usernames.length];  // Map each VU to a username
  let currentCookie = '';  // Map each VU to a username

  group("Login", function () {
    postman[Request]({
      name: "Login",
      id: "7d8934b7-618c-4a5f-9ec3-cde015529d1f",
      method: "POST",
      address: "{{URL}}/login.php",
      data: {
        username: currentUser,
        password: "{{password}}"
      },
      post(response) {

        let rsp = {};
        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
        }

        pm.test("Login Sucessfull", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.sucess) {
          // pm.test.skip("Skipping test given no UserSettings was received");
        } else {
          // pm.test("UserSettings object is valid", function() {
          let expectedProperties = [
            "name",
            "username",
            "language",
            "version",
            "theme",
            "monacoTheme",
            "email",
            "profilepic",
            "cookie",
            "features",
            "breadcumbs"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`UserSettings object has property: ${prop}`, function () {
              pm.expect(rsp.userSettings).to.have.property(prop);

              if (prop === "cookie") {
                currentCookie = rsp.userSettings.cookie;
              }
            });
          });

          pm.test("UserSettings object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.userSettings).length).to.equal(expectedProperties.length);
          });
        }
      }
    });
  });

  group("Elements", function () {
    postman[Request]({
      name: "Get elements",
      id: "83370b75-67ce-4c63-88a5-5a094500323a",
      method: "GET",
      address:
        "{{URL}}/elements.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        let rsp = {};
        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
          return;
        }

        pm.test("Get list query", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.dataSource?.length) {
          // pm.test.skip("Skipping test given user has no elements");
        } else {
          // pm.test("Element object is valid", function() {
          let expectedProperties = [
            "id",
            "name",
            "collectionLabel",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Element object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Element object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource[0]).length).to.equal(expectedProperties.length
              );
          });
          // });
        }
      }
    });
  });

  group("Collections", function () {
    postman[Request]({
      name: "Get collections",
      id: "3b7bd073-fc6b-4869-98dc-9f09f5b0bca7",
      method: "GET",
      address:
        "{{URL}}/collections.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {

        let rsp = {};
        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
          return;
        }

        pm.test("Get list query", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.dataSource?.length) {
          // pm.test.skip("Skipping test given user has no collections");
        } else {
          // pm.test("Collection object is valid", function() {
          let expectedProperties = [
            "name",
            "application",
            "applicationLabel",
            "details",
            "icon",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Collection object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Collection object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource[0]).length).to.equal(expectedProperties.length
              );
          });
          // });
        }
      }
    });
  });

  group("Applications", function () {
    postman[Request]({
      name: "Get applications",
      id: "dcfb2560-c6ce-4849-a4d6-c5186a4bda45",
      method: "GET",
      address:
        "{{URL}}/applications.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        let rsp = {};

        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
          return;
        }

        pm.test("Get list query", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.dataSource?.length) {
          // pm.test.skip("Skipping test given user has no applications");
        } else {
          // pm.test("Application object is valid", function() {
          let expectedProperties = [
            "name",
            "details",
            "logo",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Application object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Application object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource[0]).length).to.equal(expectedProperties.length
              );
          });
        }
      }
    });
  });
}

export function handleSummary(data) {
  return {
    "./report/k6-report.html": htmlReport(data),
  };
}