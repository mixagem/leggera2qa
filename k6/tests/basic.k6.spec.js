// Auto-generated by the postman-to-k6 converter

import "../libs/shim/core.js";
import "../libs/shim/expect.js";
import "../libs/shim/urijs.js";
import { group, sleep } from "k6";
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";

export let options = {
  vus: 60,
  duration: '15s',
  maxRedirects: 4
};

// to replace by reading txt file and parsing the aray
const usernames = ["WiseOwl6669", "VibrantParrot7806", "ElegantSwan2482", "QuickCheetah3829", "AgileRabbit3532", "WiseOwl5670", "SwiftHedgedog3196", "SwiftHedgedog986", "MightyBuffalo5292", "SwiftHedgedog7564", "WiseOwl8661", "QuickCheetah9841", "AgileRabbit827", "ElegantSwan1554", "ElegantSwan2178", "AgileRabbit5328", "ElegantSwan4250", "VibrantParrot5400", "MightyBuffalo1430", "MightyBuffalo604", "ElegantSwan3228", "QuickCheetah1623", "QuickCheetah2886", "ElegantSwan9356", "JoyfulElephant9666", "QuickCheetah7264", "WiseOwl3472", "JoyfulElephant8819", "VibrantParrot9458", "QuickCheetah1661", "ElegantSwan1881", "MightyBuffalo489", "QuickCheetah8594", "MightyBuffalo7707", "MightyBuffalo5704", "VibrantParrot2543", "AgileRabbit7731", "MightyBuffalo275", "QuickCheetah7986", "JoyfulElephant9034", "SwiftHedgedog1147", "SwiftHedgedog1202", "ElegantSwan773", "QuickCheetah118", "MightyBuffalo4191", "WiseOwl4655", "WiseOwl3193", "QuickCheetah3004", "SwiftHedgedog9032", "MightyBuffalo7611", "JoyfulElephant5233", "VibrantParrot879", "ElegantSwan2918", "AgileRabbit5076", "SwiftHedgedog9744", "VibrantParrot9283", "JoyfulElephant3146", "VibrantParrot9855", "JoyfulElephant2569", "AgileRabbit9806", "JoyfulElephant2871", "ElegantSwan9155", "QuickCheetah785", "SwiftHedgedog9138", "WiseOwl1468", "VibrantParrot1656", "WiseOwl5796", "AgileRabbit4549", "SwiftHedgedog4197", "QuickCheetah8975", "WiseOwl4618", "AgileRabbit2065", "MightyBuffalo560", "WiseOwl1649", "VibrantParrot7520", "JoyfulElephant2437", "WiseOwl1445", "MightyBuffalo1977", "SwiftHedgedog1813", "VibrantParrot9229", "ElegantSwan6898", "VibrantParrot4710", "WiseOwl9205", "SwiftHedgedog5222", "ElegantSwan805", "MightyBuffalo3185", "ElegantSwan8496", "AgileRabbit5970", "SwiftHedgedog9706", "MightyBuffalo5085", "MightyBuffalo3056", "AgileRabbit5499", "SwiftHedgedog6102", "VibrantParrot4283", "SwiftHedgedog3295", "ElegantSwan3712", "ElegantSwan8445", "JoyfulElephant7365", "MightyBuffalo4748", "JoyfulElephant4191", "WiseOwl3171", "MightyBuffalo9035", "VibrantParrot1501", "VibrantParrot1422", "QuickCheetah1882", "QuickCheetah3404", "ElegantSwan3715", "MightyBuffalo8968", "VibrantParrot8016", "VibrantParrot8104", "JoyfulElephant5757", "AgileRabbit669", "JoyfulElephant2137", "WiseOwl3234", "ElegantSwan8034", "MightyBuffalo7343", "VibrantParrot4237", "WiseOwl7812", "QuickCheetah5343", "QuickCheetah2083", "SwiftHedgedog5162", "WiseOwl5769", "ElegantSwan5920", "ElegantSwan9457", "SwiftHedgedog8451", "AgileRabbit3949", "JoyfulElephant3732", "WiseOwl7286", "MightyBuffalo9025", "JoyfulElephant4342", "VibrantParrot2640", "MightyBuffalo9046", "AgileRabbit3870", "QuickCheetah9447", "ElegantSwan7031", "QuickCheetah1878", "ElegantSwan4329", "QuickCheetah1757", "QuickCheetah1639", "WiseOwl5634", "VibrantParrot6625", "JoyfulElephant1492", "JoyfulElephant9257", "JoyfulElephant8892", "SwiftHedgedog4546", "JoyfulElephant936", "SwiftHedgedog2694", "WiseOwl6354", "VibrantParrot9050", "JoyfulElephant9781"];

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    URL: "http://localhost:3001",
    password: "1",
  }
});

export default function () {
  const currentUser = usernames[__VU % usernames.length];  // Map each VU to a username
  let currentCookie = '';  // Map each VU to a username

  group("Login", function () {
    postman[Request]({
      name: "Login",
      id: "7d8934b7-618c-4a5f-9ec3-cde015529d1f",
      method: "POST",
      address: "{{URL}}/login.php",
      data: {
        username: currentUser,
        password: "{{password}}"
      },
      post(response) {

        let rsp = {};
        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
        }

        pm.test("Login Sucessfull", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.sucess) {
          // pm.test.skip("Skipping test given no UserSettings was received");
        } else {
          // pm.test("UserSettings object is valid", function() {
          let expectedProperties = [
            "name",
            "username",
            "language",
            "version",
            "theme",
            "monacoTheme",
            "email",
            "profilepic",
            "cookie",
            "features",
            "breadcumbs"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`UserSettings object has property: ${prop}`, function () {
              pm.expect(rsp.userSettings).to.have.property(prop);

              if (prop === "cookie") {
                currentCookie = rsp.userSettings.cookie;
              }
            });
          });

          pm.test("UserSettings object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.userSettings).length).to.equal(expectedProperties.length);
          });
        }
      }
    });
  });

  group("Elements", function () {
    postman[Request]({
      name: "Get elements",
      id: "83370b75-67ce-4c63-88a5-5a094500323a",
      method: "GET",
      address:
        "{{URL}}/elements.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        let rsp = {};
        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
          return;
        }

        pm.test("Get list query", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.dataSource?.length) {
          // pm.test.skip("Skipping test given user has no elements");
        } else {
          // pm.test("Element object is valid", function() {
          let expectedProperties = [
            "id",
            "name",
            "collectionLabel",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Element object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Element object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource[0]).length).to.equal(expectedProperties.length
              );
          });
          // });
        }
      }
    });
  });

  group("Collections", function () {
    postman[Request]({
      name: "Get collections",
      id: "3b7bd073-fc6b-4869-98dc-9f09f5b0bca7",
      method: "GET",
      address:
        "{{URL}}/collections.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {

        let rsp = {};
        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
          return;
        }

        pm.test("Get list query", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.dataSource?.length) {
          // pm.test.skip("Skipping test given user has no collections");
        } else {
          // pm.test("Collection object is valid", function() {
          let expectedProperties = [
            "name",
            "application",
            "applicationLabel",
            "details",
            "icon",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Collection object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Collection object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource[0]).length).to.equal(expectedProperties.length
              );
          });
          // });
        }
      }
    });
  });

  group("Applications", function () {
    postman[Request]({
      name: "Get applications",
      id: "dcfb2560-c6ce-4849-a4d6-c5186a4bda45",
      method: "GET",
      address:
        "{{URL}}/applications.php?username=" + currentUser + "&cookie=" + currentCookie + "&operation=getlist",
      post(response) {
        let rsp = {};

        try {
          rsp = pm.response.json();
        } catch (e) {
          // console.error("Invalid JSON response:", e);
          rsp['sucess'] = false;
          return;
        }

        pm.test("Get list query", function () {
          if (rsp === undefined) {
            pm.expect(false).to.be.true;
            return;
          } else {
            pm.expect(rsp.sucess).to.be.true;
          }
        });

        if (!rsp.dataSource?.length) {
          // pm.test.skip("Skipping test given user has no applications");
        } else {
          // pm.test("Application object is valid", function() {
          let expectedProperties = [
            "name",
            "details",
            "logo",
            "stamp",
            "owner",
            "lastUsed"
          ];

          expectedProperties.forEach(prop => {
            pm.test(`Application object has property: ${prop}`, function () {
              pm.expect(rsp.dataSource[0]).to.have.property(prop);
            });
          });

          pm.test("Application object has no new properties", function () {
            pm.expect(
              Object.keys(rsp.dataSource[0]).length).to.equal(expectedProperties.length
              );
          });
        }
      }
    });
  });
}

export function handleSummary(data) {
  return {
    "./k6-report/k6-report.html": htmlReport(data),
  };
}